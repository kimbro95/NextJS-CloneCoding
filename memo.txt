########################
### 3.0 NextJS Setup ###
########################
-NextJS 프로젝트 초기화
npx create-next-app@latest --typescript (https://nextjs.org/docs/getting-started)

NextJS, React 최신(rc) 버전 설치
npm i next@latest react@rc react-dom@rc

🚨 에러
TypeError: Cannot set properties of undefined (setting 'reactRoot')

next.config.js 파일에 
experimental: {reactRoot: true} 추가하여 버전다운그레이드 없이 실행하기

소프트웨어 배포 생명 주기
1.Alpha : 소프트웨어 테스트를 시작하는 첫 단계
2.Beta : 알파의 뒤를 잇는 소프트웨어 개발 단계
3.RC(Release Candidate) : 최종 릴리즈 후보    👈 현재 프로젝트의 react 버전
4.RTM : 완성된 버전


#############################
### 3.1 TailwindCSS Setup ###
#############################
-Tawilwind CSS 설치 및 초기화
npm i -D tailwindcss postcss autoprefixer
npx tailwindcss init -p ( postcss.config.js, tailwindcss.config.js 파일 생성)
https://tailwindcss.com/docs/installation/using-postcss

globals.css
기존 내용을 전부 삭제하고
@tailwind base;
@tailwind components;
@tailwind utilities;
추가


########################
### 4.0 Introduction ###
########################
-TailwindCSS
클래스로 가득 찬 유틸리티 최초의 CSS프레임워크

-Tailwind CSS IntelliSense (vscode 확장 프로그램)
클래스명 자동완성 기능
https://tailwindcss.com
https://tailwind.build/classes - 클래스 검색 사이트


#########################################################
### 4.1 Test Drive part One - 4.3 Test Drive part Two ###
#########################################################
-TailwindCSS
ex) px-1
뒤에 숫자가 붙으면 숫자(1)x 4 4px이 적용되고 rem은 1 / 4인 0.25rem으로 적용된다
TailwindCSS는 rem 단위라서 반응형 웹을 만들기에도 편한다.

클래스명에서 x는 left, right의 x축 y는 top, bottom의 y축을 의미한다.
ex) px-1 : padding-left, padding-right
    py-1 : padding-top, padding-bottom


#####################
### 4.4 Modifiers ###
#####################
-TailwindCSS Modifiers List
hover(&:hover)
focus(&:focus)
active(&:active)
first(&:first-child)
disabled(&:disabled)
sm(@media (min-width: 640px))
md(@media (mid-width: 768px))
lg(@media (min-width: 1024px))
dark(@media (perfers-color-scheme: dark))
참조
https://tailwindcss.com/docs/hover-focus-and-other-states#quick-reference


#######################
### 4.5 Transitions ###
#######################
-Ring Width
상자 그림자가 있는 윤곽선을 만들기 위한 유틸리티
ring-{width}를 사용하여 특정 두께의 solid box-shadow를 요소에 적용
링은 기본적으로 반투명한 파란색으로 많은 시스템의 기본 포커스 링 스타일과 유사
ex) <button> className="...ring-offset-2 ring-2"</button>
    <button> className="...focus: ring-2"</button>
    <div className="...ring-2 hover: ring-4"></div>
    <div className="...ring-2 md: ring-4"></div>
참조
https://tailwindcss.com/docs/ring-width


-Ring Color
외곽선 링의 색상을 설정하는 유틸리티
ring-{color}를 사용하여 외곽선 링의 색상을 설정
ex) <button className="...ring-2 ring-blue-500"></button>
    <button className="...ring-2 ring-blue-500/50></button>
참조
https://tailwindcss.com/docs/ring-color


###############################
### 4.6 Modifiers for Lists ###
###############################
first(:first-child) 자식요소 첫번째에 스타일을 지정
last(:last-child) 자식요소 마지막번째에 스타일을 지정
only(:only-child) 자식요소가 한 개일 경우 스타일 지정
odd (:nth-child(odd)) 자식요소의 순서가 홀수일 때 스타일 지정
even (:nth-child(even)) 자식요소의 순서가 짝수일 때스타일 지정
참조
https://tailwindcss.com/docs/hover-focus-and-other-states#first

-empty (:empty)
empth 수정자를 사용하여 콘텐츠가 없는 경우 스타일 지정
ex) {["1", "2", "3", ""].map((v, i) => (
        <li key={i} className="bg-green-400 py-1 empty:hidden">
            {v}
        </li>
    ))}
배열에 3번째 다음이 빈값이기 때문에 empty:hidden을 준다
empty: hidden => display:none과 같다.
참조
https://tailwindcss.com/docs/hover-focus-and-other-states#empty


###############################
### 4.7 Modifiers for Forms ###
###############################
-group
상위 상태를 기반으로 한 스타일 지정 (group-{modifier})
일부 부모 요소의 상태를 기반으로 요소의 스타일을 지정해야 하는 경우 부모를 그룹으로 클래스를 표시하고
group-hover와 같은 group-* 수정자를 사용하여 대상 요소의 스타일을 지정한다.
group-focus, group-active, group-odd와 같은 모든 유사 클래스 수정자와 함께 작동한다.
참조
https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state

-peer
형제 상태를 기반으로 한 스타일 지정 (peer-{modifier})
형제 요소의 상태를 기반으로 요소의 스타일을 지정해야 하는 경우 형제를 피어 클래스로 표히사고
peer-invaild 같은 peer-* 수정자를 사용하여 대상 요소의 스타일을 지정합니다.
peer-focus, peer-required, peer-disabled와 같은 모든 유사 클래스 수정자와 함께 작동한다.
참조
https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-sibling-state


##########################
### 4.8 More Modifiers ###
##########################
-details
HTML 요소이다 details는 요소가 "open" 상태일 때만 내부 정보를 보여주고 정보 공개 위젯을 생성한다.
요약이나 레이블은 summary요소를 통해 제공할 수 있습니다.
정보공개 위젯은 보통 레이블 옆의 작은 삼각형이 돌아가면서 open/close상태로 나뉜다.
details요소의 첫 번째 자식이 summary요소라면 summary의 콘텐츠를 위젯의 레이블로 사용한다.
ex) <details>
        <summary>Hello Details</summary>
        <span>Details</span>
    </details>
참조
https://developer.mozilla.org/ko/docs/Web/HTML/Element/details

-file
파일 수정자를 사용하여 파일 입력의 버튼 스타일 지정 (file-{modifier})
ex) file:bg-blue-400 file:py-4
참조
https://tailwindcss.com/docs/hover-focus-and-other-states?email=george%40krugerindustrial&password=Bosco#file-input-buttons


#####################################################################
### 4.9 Responsive Modifiers - 4.10 Responsive Modifiers part Two ###
#####################################################################
-Responsive Design
화면 크기를 기반으로 한 스타일 지정 ( sm, md, lg, xl, 2xl )
sm: 최소길이가 640px 일 때
md: 최소길이가 768px 일 때
lg: 최소길이가 1024px 일 때
xl: 최소길이가 1280px 일 때
2xl: 최소길이가 1536px 일 때
참조
https://tailwindcss.com/docs/responsive-design#overview

-Viewport orientation
portrait: 가로 모드 ex.portrait:bg-blue-400
landscape: 세로 모드 ex.landscape: bg-orange-400
참조
https://tailwindcss.com/docs/hover-focus-and-other-states#viewport-orientation



######################
### 4.11 Dark Mode ###
######################
-Dark Mode
Tailwind에는 dark모드가 활성화되어 있을 때 사이트 스타이을 다르게 지정할 수 있는 dark변형이 포함되어있다.
현재 사용 중인 운영 체제 설정에 따라 dark가 자동으로 적용된다.
ex) dark:bg-gray-500
참조
https://tailwindcss.com/docs/dark-mode

수동 다크모드
운영 체제 기본 설정에 의조하는 대신 수동으로 다크 모드 전환을 지원하려면
tailwind.config.js에서 다크모드 설정을 media 대신 class 를 사용해야한다.

tailwind.config.js
// 클래스를 기준으로 다크모드 적용 ( 최상위 부모에 dark클래스를 지정해줘야한다. ex.<html className="dark">, <body className="dark"> )
module.exports = {
    ...
    darkMode: "class",
}

// @media(prefers-color-scheme)를 기준으로 다크모드 적용( 기본 값 )
module.export = {
    ...
    darkMode: "media",
}
참조
https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually



##################################
### 4.12 Just In Time Compiler ###
##################################
-Migrating to the JIT engine
TailwindCSS 엔진
v3.0 이전: 거대한 CSS파일을 생성하고, 그 파일에 이미 정의해놓은 클래스들을 가져와 사용하는 방식
이 경우에 코드 길이가 길고 클래스로 가득찬 파일을 가져와서 개발단계에 사용하기 때문에 매우 무겁고
배보 전 purge를 해줘야하는 번거로움이있다.

v3.0 이후: 사용자가 사용하는 스타일들만 그때 그때 생성해서 사용하는 방식
여러 클래스들을 조합해서 사용할 수 있고, 매우 가볍고, 배포 전 purge를 해주지 않아도된다.
참조
https://tailwindcss.com/docs/upgrade-guide#migrating-to-the-jit-engine



#############################################
### 5.1 Auth part One - 5.2 Auth part Two ###
#############################################
-Plugins
재사용 가능한 타사 플러그인 Tailwind 확장 개요 플러그인을 사용하려면
CSS대신 JavaScripte를 사용하여 사용자의 스타일시트에 삽입할 Tawilwind 에 대한 스타일을 동록 할 수 있다.
참조
https://tailwindcss.com/docs/plugins

-@tailwindcss/forms
form 요소를 유틸리티로 쉽게 재정의할 수 있도록 하는 form 스타일에 대한 기본 재설정을 제공하는 플러그
@tailwindcss/forms 플러그인은 유틸리티 클래스를 사용하여 form 요소의 스타일을 쉽게 지정할 수 있도록 하는 독창적인
form reset layer를 추가한다.
설치
npm i -D @tailwindcss/forms

⭐플러그인은 설치 후 tailwind.config.js에 plugins에 추가해야한다.⭐
// tailwind.config.js
module.exports = {
    theme:{
        ...
    },
    plugins:[require("@tailwindcss/forms")],
}
plugins안에 require(플러그인명)을 추가한다.
참조
https://tailwindcss.com/docs/plugins#forms



#######################
### 5.3 Home Screen ###
#######################
-Heroicons
TailwindCSS로부터 만들어진 손으로 만든 SVG아이콘
참조
https://heroicons.com/

-Space Between ( space-x, space-y )
자식 요소 사이의 공간을 제어하기 위한 유틸리티.

space-x-{amount} 유틸리티를 사용하여 요소 사이의 수평공간(x축)을 제어한다.
ex) space-x-2
space-y-{amount} 유틸리티를 사용하여 요소 사이의 수직공관(y축)을 제어한다.
ex) space-y-4
참조
https://tailwindcss.com/docs/space#add-vertical-space-between-children



#################
### 5.8 Chats ###
#################
-Divide Width
엘리먼트 사이의 border width를 제어하기 위한 유틸리디
divide-x => border-right-width: 1px; border-left-width: 0px;
divide-x-2 => border-right-width: 2px; border-left-width: 0px;

divide-y => border-top-width: 0px; border-bottom-width: 1px;
divide-y-2 => border-top-width: 0px; border-bottom-width: 2px;
참조
https://tailwindcss.com/docs/divide-width



#######################
### 5.9 Chat Detail ###
#######################
-Top/Right/Bottom/left
positioned된 요소의 배치를 제어하기 위한 유틸리티

ex) inset-x-0 => left: 0px; right: 0px;
    inset-x-2 => left: 0.5rem; /* 8px */ right: 0.5rem; /* 8px */

    inset-y-0 => top: 0px; bottom: 0px;
    inset-y-2 => top: 0.5rem; /* 8px */ bottom: 0.5rem; /* 8px */
참조
https://tailwindcss.com/docs/top-right-bottom-left



####################
### 5.13 Streams ###
####################
-Aspect Ratio
요소의 종횡비를 제어하기 위한 유틸리티
또는 대괄호를 사용하여 새로운 속성을 생성할 수 있다.

ex) aspect-auto => aspect-ratio: auot;
    aspect-square => aspect-ratio: 1/1;
    aspect-video => aspect-ratio: 16/9;
-aspect-ratio CSS
종횡비 CSS속성은 자동 크기 및 기타 레이아웃 기능 계산에 사용되는 상자의 기본 종횡비를 설정한다.
참조
https://tailwindcss.com/docs/aspect-ratio
https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio



###########################
### 5.14 Streams Detail ###
###########################
-overflow scrollbar hide
global.css
body{
    -ms-overflow-style: none;
}
::-webkit-scrollbar {
    display: none;
}
추가한다.



###################################################
### 5.16 Layout part One - 5.17 Layout part Two ###
###################################################
-Max-Width
요소의 최대 너비를 설정하는 유틸리티.
ex) max-w-none => max-width: none;
    max-w-xs => max-width: 20rem; /* 320px */
    max-w-sm => max-width: 24rem; /* 384px */
    max-w-md => max-width: 28rem; /* 448px */
    max-w-lg => max-width: 32rem; /* 512px */
    max-w-full => max-width: 100%;
    max-w-screen-sm => max-width: 640px;
    max-w-screen-md => max-width: 768px;
    max-w-screen-lg => max-width: 1024px;
    max-w-screen-xl => max-width: 1280px;
대괄호를 사용하여 임의의 값을 사용하여 즉시 속성을 생성할 수도 있다.
div class="max-w-[50%]"
참조
https://tailwindcss.com/docs/max-width

-Heroicons
https://heroicons.com/

-router.back()
history로 navigate합니다. 브라우저의 뒤로 버튼을 클릭하는 것과 같습니다. window.history.back()을 실행한다.
참조
https://nextjs.org/docs/api-reference/next/router#routerback

-router.push()
클라이언트 측 전환을 처리합니다. 외부 URL에 대해 router.push를 사용할 필요가 없습니다. window.location은 이러한 경우에 더 적합합다.
참조
https://nextjs.org/docs/api-reference/next/router#routerpush



###########################
### 6.1 What is Prisma ###
###########################
-Prisma
Node.js and TypeScript ORM ( Object Relational Mapping )
JS or TS 와 DB 사이에 다리를 놓아줌 ( 번역기 역할을 한다고 생각하면된다. )

Prisma를 사용하기 위해서는 먼저 Prisma에게 DB가 어떻게 생겼는지
데이터의 모양을 설명해야한다.
=> Schema.Prisma

Prisma가 이런 타입에 관한 정보를 알고 있으면 client를 생성해줄 수 있음
client를 이용하면 TS로 DB와 직접 상호작용이 가능하고 자동완성 제공하는

Prisma Studio : Visual Database Browser, DB를 위한 관리자 패널같은 것이다.

Prisma는 개발자가 PostgreSQL, MySQL, SQL Server, SQLite, MongoDB 오픈 소스 데이터베이스 도구를
사용하여 더 빠르게 빌드하고 오류를 줄이는데 도움을 준다
참조
- https://www.prisma.io/



########################
### 6.2 Prisma Setup ###
########################
-Prisma 설치
1. npm i prisma -D
2. npx prisma init
이 명령은 schema.prisma라는 파일과 프로젝트 루트에 .env파일을 포함하여 prisma라는 새 디렉토리를 생성한다.
schema.prisma는 데이터베이스 연결과 Prisma Client 생성기가 있는 Prisma 스키마를 포함한다.
.env는 환경 변수를 정의하기 위한 dotenv 파일이다.( DB를 연결할 때 사용된다. )
schema.prisma 파일에서
ex) datasource db {
        provider = "mysql"
        url      = env("DATABASE_URL")
    }
    provider를 사용할 DB로 바꿔야한다.

-참조
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
-Prisma Model 예시
https://www.prisma.io/docs/concepts/components/prisma-schema
-VSCode Prisma Extension
https://marketplace.visualstudio.com/items?itemName=Prisma.prisma



###############################
### 6.3 What is PlanetScale ###
###############################
-PlanetScale
MySQL호환 Serverless 데이버베이스 플랫폼
https://planetscale.com/

-Vitess
Vitess는 MySQL을 스케일링하기 위한 데이터베이스 클러스터링 시스템의
인터넷에서 가장 큰 사이트를 호스팅하는 강력한 오픈 소스 기술이다
https://vitess.io/

Vitess 장점
- 수평 스케일
- 고가용성( 기본 복제본 구성은 예기치 않은 이벤트가 발생시 기본에서 복제본으로 원활한 장애조치를 허용 )
- MySQL호환
- 쿠버네티스 네이티브
- 구체화된 뷰
- 온라인 스키마 마이그레이션



#####################################
### 6.4 Connecting to PlanetScale ###
#####################################
-PlanetScale CLI
PlanetScale은 데이터베이스 이상이며 CLI는 복잡한 명령 이상이다.
pscale 커맨드 라인을 사용하여 branch, deploy요청 및 기타 PlanetScale 개념을 손쉽게 사용할 수 있다.
참조
https://github.com/planetscale/cli

PlanetScale CLI 설치(윈도우)
1.Scoop설치 (윈도우용 커맨드 라인 설치 프로그램)
- https://scoop.sh/
2.scoop bucket add pscale https://github.com/planetscale/scoop-bucket.git
3.scoop install pscale mysql
4.scoop update pscale

PlanetScale CLI를 사용하여 데이터베이스
생성
pscale database create ## DB NAME ## --region ap-northeast
연결
pscale connect carrot-market
⭐커맨드창을 종료하면 안된다.

연결시 나오는 URL을 .env 파일에 적용하기
ex) DATABASE_URL="mysql://127.0.0.1.@@@@/DB NAME"



###############################
### 6.5 Push To PlanetScale ###
###############################
-Prisma Client and schema preview features
Prisma Client 및 Prisma 스키마에 대해 Preview features 플래그를 사용할 수 있다.
참조
https://www.prisma.io/docs/concepts/components/preview-features/client-preview-features\

-Referential integrity (참조 무결성)
어떤 다른 모델을 참조하는 경우 해당 모델이 반드시 존재해야한다.
참조 무결성은 모든 참조가 유효함을 나타내는 데이터 세트의 속성이다.
참조 무결성을 위해서는 한 레코드가 다른 레코드를 참조하는 경우 반드시 해당 참조하는 레코드가 존재해야 한다.
ex) Post모델이 user필드를 정의하는 경우 User(모델)도 반드시 존재해야한다.
참조
https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity

-datasource에서 referential integrity 설정
활성화
schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]    <-- this.line
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"               <-- this.line
}
두 라인을 추가해서 활성화해야 참조무결성여부 확인

참조
https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity#setting-the-referential-integrity-in-the-datasource

-db push
db push는 Prisma Migrate와 동일한 엔진을 사용하여 Prisma 스키마를 DB스키마와 동기화하여 스키마 프로토 타이밍에 가장 적합
ex) npx prisma db push

참조
https://www.prisma.io/docs/concepts/components/prisma-migrate/db-push



#########################
### 6.6 Prisma Client ###
#########################
-Prisma Client
TypeScript 및 Node.js용 직관적인 데이터베이스 클라이언트
Prisma Client는 생각하는 방식으로 구성하고 앱에 맞춤화된 유형으로 Prisma스키마에서 자동 생성되는 쿼리 빌더이다.
직관적인 API로 설계되어있다.

npm install prisma --save-dev
npx prisma

npm install @prisma/client
ex) import { PrismaClient } from '@prisma/client'
    const prisma = new PrismaClient()

    const newUser = awaut prisma.user.create({
        data:{
            email: "hi@naver.com",
            name" "hello",
        }
    })

❗ Prisma Client는 프론트엔드에서는 보안문제로 작동하지 않고 서버에서만 사용할 수 있다. ❗



######################
### 6.7 API Routes ###
######################
-API Routes
API Routes는 NextJS로 API를 빌드하기 위한 솔루션을 제공한다.
pages/api 폴더 내의 모든 파일은 /api/*에 매핑되며 API endpoint로 처리됩니다.
sever-side 전용 번들이며 client-side번들 크기를 늘리지 않는다.

req: http.IncomingMessage의 인스턴스와 pre-built된 일부 미들웨어
res: http.ServerResponse의 인스턴스와 일부 helper함수
ex) 다음 API 경로 pages/api/user.js는 상태 코드가 200인 json 응답을 반환합니다.
    export default function handler(
        req: NextApiRequest, 
        res: NextApiResponse,
    ){
        res.status(200).json({ name : 'John Doe' })
    }
참조
https://nextjs.org/docs/api-routes/introduction



############################################
### 7.0 Introduction ( React Hook Form ) ###
############################################
-React Hook Form
사용하기 쉬운 유효성 검사를 통해 성능이 뛰어나고 유연하며 확장 가능한 form이다
참조
https://react-hook-form.com/



##############################
### 7.1 Making Forms Alone ###
##############################
-React Hook Form설치
현재 react18 rc 버전 
npm i react-hook-form --legacy-peer-deps

react18 정식 출시 후 react hook form도 업데이트 완료시
npm i react-hook-form

참조
https://react-hook-form.com/get-started
https://www.npmjs.com/package/react-hook-form



#################################
### 7.2 The Register Function ###
#################################
-Register
register:(name: string, RegisterOptions?) => ({onChange, onBlur, name, ref})
이 메소드를 사용하면 input을 등록하거나 엘리먼트를 선택하고 React Hook Form에 유효성 검사 규칙을 적용할 수 있다.
유효성 검사 규칙은 모두 HTML표준을 기반으로 하며 사용자 지정 유효성 검사 방법도 허용한다.
ex) import { useForm } from 'react-hook-form';
    const { register, handleSubmit } = useForm();

    <input 
        {...register("firstName", {required : true })}
        placeholder="First Name"
    />
참조
https://react-hook-form.com/api/useform/register



################################################
### 7.3 Validation - 7.4 Validation part Two ###
################################################
-register 옵션
required : string | { value : boolean, message : string }
minLength : number | { value : number, message : string }
ex) <input 
        {...register("test",{
            required : 'erroe message;,
        })}
    />
    <input 
        {...register("test",{
            minLength:{
                message : "5자이하입니다.",
                value : 5,
            }
        })}
    />
참조
https://react-hook-form.com/api/useform/register

-handleSubmit
이 함수는 form 유효성 검사가 성공하면 form 데이터를 수신한다.
ex) form onSubmit={ handleSubmit( onSubmit, onError ) }

onSubmit( SubmitHandler ) <-- 성공시 콜백
(data : Object, e?: Event ) => void

onError( SubmitErrorHandler ) <-- 에러 콜백
(errors : Object, e?: Event ) => void
참조
https://react-hook-form.com/api/useform/handlesubmit



##################
### 7.5 Errors ###
##################
-validate
유효성을 검사할 인수로 콜백 함수를 전달하거나 콜백 함수의 개체를 전달하며 모든 유효성을 검사할 수 있다.
ex) <input
        {...register("test", {
            validate : value => value === '1'
        })}
    />
ex2)<input
        {...register("email", {
            required : "Email is required",
            validate : {
                checkGamil : (value) => !value.inclueds("@gmail.com") ? "" : "Gmail is not allowed",
            }
        })}  
    />
참조
https://react-hook-form.com/api/useform/register/

-mode
mode: onChange | onBlur | onSubmit | onTouched | all = 'onSubmit'
이 옵션을 사용하면 사용자가 form을 제출하기 전에 유효성 검사를 할 수 있다.
onTouched
유효성 검사는 첫 번째 blur 이벤트에서 트리거됩니다. 그 후에는 모든 change 이벤트에서 트리거됩니다.
all
blur 및 change 이벤트에서 유효성 검사가 트리거됩니다.
참조
https://react-hook-form.com/api/useform#props



##################
### 7.6 Extras ###
##################
-setError()
이 함수를 사용하면 하나 이상의 오류를 수동으로 설정할 수 있다.
ex) setError("username",{
        type:"manual",
        message" "Username Error",
    })
참조
https://react-hook-form.com/api/useform/seterror

-reset()
전체 form state 또는 form state의 일부를 리셋한다.
 form에서 submit후, 전체 input 초기화
 참조
 https://react-hook-form.com/api/useform/reset

 -resetField()
 개별 field state를 재설정한다.
 form에서 submit후, 특정 input만 초기화
 참조
 https://react-hook-form.com/api/useform/resetfield



######################
### 8.0 Enter Form ###
######################
-Type-Only Imports and Exports
import type은 타입 표기와 선언에 사용될 선언만 import, export한다.
런타임에서는 완전히 지워진다.
마찬가지로 export type은 타입 문맥에 사용할 export만 제공 이 또한 TypeScript의 출력물에서 제거됩니다.
Typescript 3.8에 추가된 것으로 정확하게 type만 import, export하도록 명시 할 수 있다.

ex) import type { user } from './hello';
    export type { user };
    import type { UseFormRegisterReturn } from "react-hook-form";
참조
https://www.typescriptlang.org/ko/docs/handbook/release-notes/typescript-3-8.html